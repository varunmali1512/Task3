#include <iostream>
using namespace std;

const int MAX_STUDENTS = 100;    // Maximum number of students
const int NAME_LENGTH = 50;     // Maximum length for student names

struct Student {
    int id;
    char name[NAME_LENGTH];
    int marks[5];               // Store up to 5 marks per student
    int numMarks;
    float average;
};

Student students[MAX_STUDENTS];
int studentCount = 0;

void addStudent() {
    if (studentCount >= MAX_STUDENTS) {
        cout << "Student limit reached. Cannot add more students.\n";
        return;
    }

    Student s;
    cout << "Enter Student ID: ";
    cin >> s.id;

    cout << "Enter Student Name: ";
    cin.ignore(); // Clear input buffer
    cin.getline(s.name, NAME_LENGTH);

    cout << "Enter up to 5 marks (enter -1 to stop): ";
    s.numMarks = 0;
    for (int i = 0; i < 5; i++) {
        int mark;
        cin >> mark;
        if (mark == -1) break;
        s.marks[i] = mark;
        s.numMarks++;
    }

    int total = 0;
    for (int i = 0; i < s.numMarks; i++) {
        total += s.marks[i];
    }
    s.average = (s.numMarks > 0) ? (float)total / s.numMarks : 0;

    students[studentCount++] = s;
    cout << "Student added successfully.\n";
}

void editStudent() {
    int id;
    cout << "Enter Student ID to edit: ";
    cin >> id;

    for (int i = 0; i < studentCount; i++) {
        if (students[i].id == id) {
            cout << "Editing Student: " << students[i].name << "\n";

            cout << "Enter new name: ";
            cin.ignore(); // Clear input buffer
            cin.getline(students[i].name, NAME_LENGTH);

            cout << "Enter new marks (up to 5, enter -1 to stop): ";
            students[i].numMarks = 0;
            for (int j = 0; j < 5; j++) {
                int mark;
                cin >> mark;
                if (mark == -1) break;
                students[i].marks[j] = mark;
                students[i].numMarks++;
            }

            int total = 0;
            for (int j = 0; j < students[i].numMarks; j++) {
                total += students[i].marks[j];
            }
            students[i].average = (students[i].numMarks > 0) ? (float)total / students[i].numMarks : 0;

            cout << "Student updated successfully.\n";
            return;
        }
    }
    cout << "Student ID not found.\n";
}

void deleteStudent() {
    int id;
    cout << "Enter Student ID to delete: ";
    cin >> id;

    for (int i = 0; i < studentCount; i++) {
        if (students[i].id == id) {
            for (int j = i; j < studentCount - 1; j++) {
                students[j] = students[j + 1];
            }
            studentCount--;
            cout << "Student deleted successfully.\n";
            return;
        }
    }
    cout << "Student ID not found.\n";
}

void displayStudents() {
    if (studentCount == 0) {
        cout << "No students in the system.\n";
        return;
    }

    cout << "Student Records:\n";
    for (int i = 0; i < studentCount; i++) {
        cout << "ID: " << students[i].id 
             << ", Name: " << students[i].name 
             << ", Average Marks: " << students[i].average << "\n";
    }
}

int main() {
    int choice;
    while (true) {
        cout << "\nStudent Management System\n";
        cout << "1. Add Student\n";
        cout << "2. Edit Student\n";
        cout << "3. Delete Student\n";
        cout << "4. Display All Students\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                addStudent();
                break;
            case 2:
                editStudent();
                break;
            case 3:
                deleteStudent();
                break;
            case 4:
                displayStudents();
                break;
            case 5:
                cout << "Exiting...\n";
                return 0;
            default:
                cout << "Invalid choice. Please try again.\n";
        }
    }
}
